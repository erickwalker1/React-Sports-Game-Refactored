{"version":3,"sources":["audio/BackBoard.mp3","audio/Swish.mp3","images/HoustonRockets.png","images/MiamiHeat.png","images/NewOrleansPelicans.jpg","images/Pistons.png","components/Team/Team.js","components/ScoreBoard/ScoreBoard.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Team","props","shotPercentageDiv","stats","shots","shotPercentage","Math","round","score","className","name","src","logo","alt","onClick","shotHandler","ScoreBoard","visitingTeamStats","homeTeamStats","Game","shoot","team","teamStatsKey","state","random","setTimeout","scoreSound","play","shotSound","setState","resetGame","resetCount","Audio","BackBoard","Swish","this","venue","visitingTeam","logoSrc","homeTeam","Component","App","HTown","Houston","Heat","Miami","Pelicans","pelicans","Detroit","detroit","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a9b649a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BackBoard.0c416109.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Swish.6bc36809.mp3\";","module.exports = __webpack_public_path__ + \"static/media/HoustonRockets.8785e770.png\";","module.exports = __webpack_public_path__ + \"static/media/MiamiHeat.f907ade6.png\";","module.exports = __webpack_public_path__ + \"static/media/NewOrleansPelicans.698c3468.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Pistons.4d4a758f.png\";","import React from 'react'\n\nfunction Team(props) {\n    let shotPercentageDiv\n  \n    if (props.stats.shots) {\n      const shotPercentage = Math.round((props.stats.score / props.stats.shots) * 100)\n      shotPercentageDiv = (\n        <div>\n          <strong>Shooting %: {shotPercentage}</strong>\n        </div>\n      )\n    }\n  \n    return (\n      <div className=\"Team\">\n        <h2>{props.name}</h2>\n  \n        <div className=\"identity\">\n          <img src={props.logo} alt={props.name} />\n        </div>\n  \n        <div>\n          <strong>Shots:</strong> {props.stats.shots}\n        </div>\n  \n        <div>\n          <strong>Score:</strong> {props.stats.score}\n        </div>\n  \n        {shotPercentageDiv}\n  \n        <button onClick={props.shotHandler}>Shoot!</button>\n      </div>\n    )\n  }\n\n  export default Team","import React from 'react'\n\nfunction ScoreBoard(props) {\n    return (\n      <div className=\"ScoreBoard\">\n        <div className=\"teamStats\">\n          <h3>VISITORS</h3>\n          <h3>{props.visitingTeamStats.score}</h3>\n        </div>\n  \n        <h3>SCOREBOARD</h3>\n  \n        <div className=\"teamStats\">\n          <h3>HOME</h3>\n          <h3>{props.homeTeamStats.score}</h3>\n        </div>\n      </div>\n    )\n  }\n  export default ScoreBoard","import React, {Component} from 'react'\n\nimport Team from '../Team/Team'\nimport ScoreBoard from '../ScoreBoard/ScoreBoard'\n\nimport BackBoard from '../../audio/BackBoard.mp3'\nimport Swish from '../../audio/Swish.mp3'\n\nclass Game extends Component {\n    constructor(props) {\n      super(props)\n  \n      this.state = {\n        resetCount: 0,\n        homeTeamStats: {\n          shots: 0,\n          score: 0\n        },\n        visitingTeamStats: {\n          shots: 0,\n          score: 0\n        }\n      }\n  \n      this.shotSound = new Audio(BackBoard)\n      this.scoreSound = new Audio(Swish)\n    }\n  \n    shoot = (team) => {\n      const teamStatsKey = `${team}TeamStats`\n      let score = this.state[teamStatsKey].score\n  \n      if (Math.random() > 0.5) {\n        score += 1\n  \n        setTimeout(() => {\n          this.scoreSound.play()\n        }, 100)\n      } else {\n        this.shotSound.play()\n      }\n  \n      this.setState((state, props) => ({\n        [teamStatsKey] : {\n          shots: state[teamStatsKey].shots + 1,\n          score\n        }\n      }))\n    }\n  \n    resetGame = () => {\n      this.setState((state, props) => ({\n        resetCount: state.resetCount + 1,\n        homeTeamStats: {\n          shots: 0,\n          score: 0\n        },\n        visitingTeamStats: {\n          shots: 0,\n          score: 0\n        }\n      }))\n    }\n  \n    render() {\n      return (\n        <div className=\"Game\">\n          <ScoreBoard\n            visitingTeamStats={this.state.visitingTeamStats}\n            homeTeamStats={this.state.homeTeamStats}\n          />\n  \n          <h1>Welcome to {this.props.venue}</h1>\n          <div className=\"stats\">\n            <Team\n              name={this.props.visitingTeam.name}\n              logo={this.props.visitingTeam.logoSrc}\n              stats={this.state.visitingTeamStats}\n              shotHandler={() => this.shoot('visiting')}\n            />\n  \n            <div className=\"versus\">\n              <h1>VS</h1>\n              <div>\n                <strong>Resets:</strong> {this.state.resetCount}\n                <button onClick={this.resetGame}>Reset Game</button>\n              </div>\n            </div>\n  \n            <Team\n              name={this.props.homeTeam.name}\n              logo={this.props.homeTeam.logoSrc}\n              stats={this.state.homeTeamStats}\n              shotHandler={() => this.shoot('home')}\n            />\n          </div>\n        </div>\n      )\n    }\n  }\n\n  export default Game","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport Game from './components/Game/Game'\n\nimport Houston from './images/HoustonRockets.png'\n\nimport Miami from './images/MiamiHeat.png'\n\nimport pelicans from '../src/images/NewOrleansPelicans.jpg'\n\nimport detroit from './images/Pistons.png'\n\nimport './App.css';\n\nfunction App(props) {\n  const HTown = {\n    name: 'Houston Rockets',\n    logoSrc: Houston\n  }\n\n  const Heat = {\n    name: 'Miami Heat',\n    logoSrc: Miami\n  }\n\n  const Pelicans = {\n    name: 'New Orleans Pelicans',\n    logoSrc: pelicans\n  }\n\n  const Detroit = {\n    name: 'Detroit',\n    logoSrc: detroit\n  }\n\n  return (\n    <div className=\"App\">\n      <Game\n        venue=\"Toyota Center\"\n        homeTeam={HTown}\n        visitingTeam={Pelicans}\n      />\n      <Game\n        venue=\"Little Ceasers Arena\"\n        homeTeam={Detroit}\n        visitingTeam={Heat}\n      />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}